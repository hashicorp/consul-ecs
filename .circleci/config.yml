version: 2.1
executors:
  go:
    docker:
      - image: docker.mirror.hashicorp.services/cimg/go:1.17

jobs:
  go-fmt-and-vet:
    executor: go
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-ecs-modcache-v2-{{ checksum "go.mod" }}

      - run: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: consul-ecs-modcache-v2-{{ checksum "go.mod" }}
          paths:
            - "/home/circleci/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi
      - run: go vet ./...

  linters:
    executor: go
    steps:
      - checkout
      - run: go get -u github.com/hashicorp/lint-consul-retry && lint-consul-retry
      - run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.31.0
      - run: golangci-lint run

  test: # defines a parameterized testing job
    description: A job that runs the tests against the specific Consul version
    parameters:
      CONSUL_VERSION:
        description: Consul version to use in tests
        default: ""
        type: string
      ENTERPRISE_FLAG:
        description: |
          Flag to indicate if the tests are running against Consul Enterprise.
          If using an Enterprise version of Consul this flag must be set to "-enterprise"
        default: ""
        type: string
    executor: go
    environment:
      CONSUL_VERSION: << parameters.CONSUL_VERSION >>
      TEST_RESULTS: /tmp/test-results/consul_<< parameters.CONSUL_VERSION >>
    parallelism: 1
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-ecs-modcache-v2-{{ checksum "go.mod" }}

      # run go tests with gotestsum
      - run: |
          # download and install the consul binary
          wget https://releases.hashicorp.com/consul/"${CONSUL_VERSION}"/consul_"${CONSUL_VERSION}"_linux_amd64.zip && \
               unzip consul_"${CONSUL_VERSION}"_linux_amd64.zip -d /home/circleci/bin &&
               rm consul_"${CONSUL_VERSION}"_linux_amd64.zip
          PACKAGE_NAMES=$(go list ./...)
          TAGS=""
          if [ -n "<< parameters.ENTERPRISE_FLAG >>" ]; then
            TAGS="-tags=enterprise"
          fi
          gotestsum --junitfile $TEST_RESULTS/gotestsum-report.xml -- -p 4 $PACKAGE_NAMES $TAGS -- << parameters.ENTERPRISE_FLAG >>

      - store_test_results:
          path: /tmp/test-results/consul_<< parameters.CONSUL_VERSION >>
      - store_artifacts:
          path: /tmp/test-results/consul_<< parameters.CONSUL_VERSION >>

  build-distro: # defines a parameterized job
    description: A job that will build the os/arch distro set by XC_OS and XC_ARCH
    parameters:
      OS:
        description: What OSes to build
        default: ""
        type: string
      ARCH:
        description: What architectures to build
        default: ""
        type: string
    executor: go
    environment:
      GOXPARALLEL: 2 # CircleCI containers are 2 CPU x 4GB RAM
    steps:
      - checkout

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - consul-ecs-modcache-v2-{{ checksum "go.mod" }}
      - run: XC_OS="<< parameters.OS >>" XC_ARCH="<< parameters.ARCH >>" ./build-support/scripts/build-local.sh
      # persist to downstream job
      - persist_to_workspace:
          root: .
          paths:
            - pkg/bin
      # save dev build to CircleCI
      - store_artifacts:
          path: ./pkg/bin

  # upload dev docker image
  dev-upload-docker:
    executor: go
    steps:
      - checkout
      # get consul-ecs binary
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run: make ci.dev-docker

workflows:
  version: 2
  test-and-build:
    jobs:
      - go-fmt-and-vet
      - linters
      - test:
          CONSUL_VERSION: "1.12.0"
          name: test-consul
          requires:
            - go-fmt-and-vet
            - linters
      - test:
          CONSUL_VERSION: "1.12.0+ent"
          ENTERPRISE_FLAG: "-enterprise"
          name: test-consul+ent
          requires:
            - go-fmt-and-vet
            - linters
      - build-distro:
          OS: "freebsd linux windows"
          ARCH: "386"
          name: build-distros-386
          requires:
            - test-consul
            - test-consul+ent
      - build-distro:
          OS: "darwin freebsd linux solaris windows"
          ARCH: "amd64"
          name: build-distros-amd64
          requires:
            - test-consul
            - test-consul+ent
      - build-distro:
          OS: "linux"
          ARCH: "arm arm64"
          name: build-distros-arm-arm64
          requires:
            - test-consul
            - test-consul+ent
      - dev-upload-docker:
          context: consul-ci
          requires:
            - build-distros-amd64
