name: build

on:
  workflow_dispatch:
  push:

env:
  PKG_NAME: "consul-ecs"

jobs:
  get-go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT

  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
      ldflags: ${{ steps.get-product-version.outputs.ldflags }}
      git-short-sha: ${{ steps.get-product-version.outputs.git-short-sha }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "product-version=$(make version)" >> $GITHUB_OUTPUT
          echo "git-short-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "ldflags=-s -w -X github.com/hashicorp/consul-ecs/version.GitCommit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  generate-metadata-file:
    needs: get-product-version
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: "Checkout directory"
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}
          repositoryOwner: "hashicorp"
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build-linux:
    needs:
      - get-go-version
      - get-product-version
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "arm"}
          - {goos: "linux", goarch: "arm64"}
          - {goos: "linux", goarch: "386"}
          - {goos: "linux", goarch: "amd64"}
          - {goos: "linux", goarch: "arm64", gotags: "fips", env: "CGO_ENABLED=1 GOEXPERIMENT=boringcrypto CC=aarch64-linux-gnu-gcc", fips: "+fips1402" }
          - {goos: "linux", goarch: "amd64", gotags: "fips", env: "CGO_ENABLED=1 GOEXPERIMENT=boringcrypto", fips: "+fips1402"}

      fail-fast: true

    name: Go ${{ needs.get-go-version.outputs.go-version }} ${{ matrix.goos }} ${{ matrix.goarch }} ${{ matrix.fips }} build

    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Setup go
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - name: CGO Dependencies
        if: ${{ matrix.fips }} == "+fips1402" && ${{ matrix.goarch }} == "arm64"
        run: |
          sudo apt-get update --allow-releaseinfo-change-suite --allow-releaseinfo-change-version && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          LDFLAGS: ${{ needs.get-product-version.outputs.ldflags }}
          CGO_ENABLED: "0"
        run: |
          go env
          mkdir dist out
          ${{ matrix.env }} go build -tags=${{ matrix.gotags }} -ldflags="$LDFLAGS" -o dist/ .
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/
          if [ "${{ matrix.goarch }}" = "amd64" ]; then
            bin=$(find dist -name consul-ecs)
            $bin version
          fi

      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  build-docker-default:
    name: Docker ${{ matrix.arch }} default release build
    needs:
      - get-product-version
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm", "arm64", "386", "amd64"]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}

    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1
        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" version | awk '{print $2}')"
            echo "TEST_VERSION=${TEST_VERSION}"
            echo "version=${version}"
            if [ "${TEST_VERSION}" != "v${version}" ]; then
              echo "Test FAILED"
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ env.version }}
          target: release-default
          arch: ${{ matrix.arch }}
          tags: |
            docker.io/hashicorp/${{ env.repo }}:${{ env.version }}
            public.ecr.aws/hashicorp/${{ env.repo }}:${{ env.version }}
          dev_tags: |
            hashicorppreview/${{ env.repo }}:${{ env.version }}
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.version }}-${{ github.sha }}

  build-docker-fips:
    name: Docker ${{ matrix.arch }} FIPS release build
    needs:
      - get-product-version
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { arch: "arm64" }
          - { arch: "amd64" }
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}+fips1402

    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Docker FIPS Build (Action)
        uses: hashicorp/actions-docker-build@v1
        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" version | awk '{print $2}')"
            echo "TEST_VERSION=${TEST_VERSION}"
            echo "version=${version}"
            if [ "${TEST_VERSION}" != "v${version}" ]; then
              echo "Test FAILED"
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ env.version }}
          target: release-fips-default
          arch: ${{ matrix.arch }}
          tags: |
            docker.io/hashicorp/${{ env.repo }}-fips:${{ env.version }}
            public.ecr.aws/hashicorp/${{ env.repo }}-fips:${{ env.version }}
          dev_tags: |
            hashicorppreview/${{ env.repo }}-fips:${{ env.version }}
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.version }}-${{ github.sha }}

  upload-dev-docker:
    name: Upload dev image (hashicorpdev/consul-ecs:<commit>)
    environment: dockerhub/hashicorpdev
    needs:
      - get-product-version
      - build-docker-default
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64"]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}
      target: release-default
      git-short-sha: ${{ needs.get-product-version.outputs.git-short-sha }}
    steps:
      - name: download image artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ${{ env.repo }}_${{ env.target }}_linux_${{ matrix.arch }}_${{ env.version }}_${{ github.sha }}.docker.dev.tar
      - name: docker push
        shell: bash
        run: |
          TAG=hashicorpdev/${{ env.repo }}:${{ env.git-short-sha }}
          echo "==> Load docker image from tar archive"
          docker load -i "${{ env.repo }}_${{ env.target }}_linux_${{ matrix.arch }}_${{ env.version }}_${{ github.sha }}.docker.dev.tar"
          echo "==> Tag docker image $TAG"
          docker tag "hashicorppreview/${{ env.repo }}:${{ env.version }}-${{ github.sha }}" "$TAG"
          echo "==> Docker login"
          echo ${{ secrets.DOCKER_PASS }} | docker login -u=${{ secrets.DOCKER_USER }} --password-stdin

          echo "==> Push docker image $TAG"
          docker push "$TAG"

      - name: docker push (latest)
        shell: bash
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          TAG=hashicorpdev/${{ env.repo }}:latest
          echo "==> Tag docker image $TAG as :latest"
          docker tag "hashicorpdev/${{ env.repo }}:${{ env.git-short-sha }}" "$TAG"

          echo "==> Push docker image $TAG"
          docker push "$TAG"
